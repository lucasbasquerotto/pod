{% set var_global_main_domain = params.main_domain | default([]) %}
{% set var_global_conf = params.conf | default({}) %}
{% set var_global_ports = params.ports | default({}) %}
{% set var_global_domains = params.domains | default({}) %}
{% set var_global_contents = params.contents | default({}) %}
{% set var_global_node_dependencies = params.dependencies | default({}) %}
{% set var_global_services = params.services | default([]) %}

{% set var_global_webservice_endpoint = var_global_conf.webservice_endpoint | default('') %}
{% set var_global_ssl = var_global_conf.ssl | default(false) %}
{% set var_global_public_http_port = var_global_ports.public_http_port | default('') %}
{% set var_global_public_https_port = var_global_ports.public_https_port | default('') %}
{% set var_global_private_http_port = var_global_ports.private_http_port | default('') %}
{% set var_global_private_https_port = var_global_ports.private_https_port | default('') %}

{% set var_outer_proxy_ips_path = var_global_conf.outer_proxy_ips_path
	| default('/var/main/data/sync/haproxy/auto/ips-proxy.lst', true)
%}
{% set var_blacklist_ip_manual_path = var_global_conf.blacklist_ip_manual_path
	| default('/var/main/data/sync/haproxy/manual/ips-blacklist.conf', true)
%}
{% set var_blacklist_ip_auto_path = var_global_conf.blacklist_ip_auto_path
	| default('/var/main/data/sync/haproxy/auto/ips-blacklist-auto.conf', true)
%}
{% set var_blacklist_user_agent_path = var_global_conf.blacklist_user_agent_path
	| default('/var/main/data/sync/haproxy/manual/ua-blacklist.lst', true)
%}

{% set var_global_internal_port_dict = {
	var_global_public_http_port: '80',
	var_global_public_https_port: '443',
	var_global_private_http_port: '9080',
	var_global_private_https_port: '9443'
} %}

{% set tmp_split = var_global_webservice_endpoint | urlsplit %}
{% set tmp_port = ((tmp_split.port | default('', true)) != '') | ternary(
		(tmp_split.port | default('', true)),
		((tmp_split.scheme | default('', true)) == 'https') | ternary('443', '80')
	) | string
%}
{% set var_global_webservice_endpoint =
	(tmp_split.hostname | default('', true)) + ':' + tmp_port
%}

{################################################################################################}
{% macro include_service(args, type, other_args) %}

	{% set var_arg_name = args.name | default('') %}
	{% set var_arg_domain = args.domain | default('') %}
	{% set var_arg_endpoint = args.endpoint | default('') %}
	{% set var_arg_service = args.service | default('') %}
	{% set var_arg_ssl = args.ssl | default(false) %}
	{% set var_arg_upgrade = args.upgrade | default(false) %}
	{% set var_arg_private = args.private | default(false) %}
	{% set var_arg_use_basic_auth = args.use_basic_auth | default(false) %}
	{% set var_arg_basic_auth_data = args.basic_auth_data | default('') %}
	{% set var_arg_basic_auth_data_content = args.basic_auth_data_content | default('') %}
	{% set var_arg_locations = args.locations | default([]) %}
	{% set var_arg_proxy = args.proxy | default(false) %}
	{% set var_arg_domain_name = args.domain_name | default('') %}
	{% set var_arg_dependency_name = args.dependency_name | default('') %}
	{% set var_arg_frontend_data = args.frontend_data | default('') %}
	{% set var_arg_backend_data = args.backend_data | default('') %}

	{% set var_domain = args.domain | default('') %}

	{################################################################################################}
	{% if var_domain == '' %}

	{% set var_domain =
		var_global_domains[
			var_arg_domain_name | default(var_arg_name, true)
		] | default('')
	%}

	{################################################################################################}
	{% if var_domain == '' %}

		{% set error = {} %}
		{{ error['domain.undefined.service.' + var_arg_name] }}

	{% endif %}
	{################################################################################################}

	{% endif %}
	{################################################################################################}

	{% set var_endpoints = args.endpoint | default('') %}

	{################################################################################################}
	{% if var_endpoints == '' %}

	{% set var_endpoints =
		var_global_node_dependencies[
			var_arg_dependency_name | default(var_arg_name, true)
		].host_list | default('')
	%}

	{% endif %}
	{################################################################################################}

	{################################################################################################}
	{% if var_endpoints is string %}

	{% set var_endpoints = [var_endpoints] | reject('equalto', '') | list %}

	{% endif %}
	{################################################################################################}

	{################################################################################################}
	{% if ((var_endpoints | length) == 0) and (var_arg_proxy | bool) %}

	{% set error = {} %}
	{{ error['endpoint.with.proxy.undefined.service.' + var_arg_name] }}

	{% endif %}
	{################################################################################################}

	{% set var_ssl = args.ssl | default(var_global_ssl) %}
	{% set var_protocol = var_ssl | bool | ternary('https', 'http') %}
	{% set var_http_port = var_arg_private | bool | ternary('9080', '80') %}
	{% set var_https_port = var_arg_private | bool | ternary('9443', '443') %}
	{% set var_listen =
		var_arg_private | bool
		| ternary(
			var_ssl | bool | ternary('9443 ssl', '9080'),
			var_ssl | bool | ternary('443 ssl', '80')
		)
	%}
	{% set var_external_port =
		var_arg_private | bool
		| ternary(
			var_ssl | bool | ternary(var_global_private_https_port, var_global_private_http_port),
			var_ssl | bool | ternary(var_global_public_https_port, var_global_public_http_port)
		)
	%}
	{% set var_port_suffix =
		(var_external_port in ('80', '443'))
		| ternary('', ':' + (var_external_port | string))
	%}
	{% set var_use_basic_auth =
		var_global_conf.disable_basic_auth | default(false) | bool
		| ternary(false, args.use_basic_auth | default(var_arg_private))
	%}

	{% set var_location_info_list = args.locations | default('path_beg /') %}

	{% set var_location_info_list =
		(
			(var_location_info_list is iterable)
			and
			(var_location_info_list is not mapping)
			and
			(var_location_info_list is not string)
		)
		| ternary(var_location_info_list, [var_location_info_list])
	%}

	{% set var_service_args = {
			'name': var_arg_name,
			'upgrade': var_arg_upgrade,
			'private': var_arg_private,
			'frontend_data': var_arg_frontend_data,
			'backend_data': var_arg_backend_data,

			'domain': var_domain,
			'endpoints': var_endpoints,
			'ssl': var_ssl,
			'protocol': var_protocol,
			'http_port': var_http_port,
			'https_port': var_https_port,
			'listen': var_listen,
			'external_port': var_external_port,
			'port_suffix': var_port_suffix,
			'use_basic_auth': var_use_basic_auth,
			'basic_auth_data': var_arg_basic_auth_data,
			'basic_auth_data_content': var_arg_basic_auth_data_content,

			'location_info_list': var_location_info_list
		}
	%}

	{################################################################################################}
	{% if type == 'frontend' %}

	{{ include_frontend(var_service_args, other_args.port, other_args.content_type) }}

	{% elif type == 'backend' %}

	{{ include_backend(var_service_args) }}

	{% endif %}
	{################################################################################################}

{% endmacro %}
{################################################################################################}

{################################################################################################}
{% macro include_backend(args) %}

### [service] {{ args.name }} - backend ###

{################################################################################################}
{% for location_info in args.location_info_list %}

{% set var_location_info =
	(location_info is string)
	| ternary({ 'location': location_info }, location_info)
%}

{% set var_location_list = var_location_info.location | default([]) %}

{% set var_location_list =
	(
		(var_location_list is iterable)
		and
		(var_location_list is not mapping)
		and
		(var_location_list is not string)
	)
	| ternary(var_location_list, [var_location_list])
%}

{################################################################################################}
{% for location in var_location_list %}

{% set var_default = (location == 'path_beg /') %}
{% set var_suffix = var_default | ternary('', '_' + (loop.index | string)) %}
{% set var_backend_data = var_location_info.data | default(args.backend_data | default('')) %}
{% set var_server_args = var_location_info.server_args | default(args.server_args | default('')) %}

backend backend_{{ args.name }}{{ var_suffix }}

	{################################################################################################}
	{% if not (args.bare | default(false) | bool) %}

	mode         http
	option       forwardfor

	### [backend - headers] {{ args.name }} ###

	http-request set-header         Host                {{ args.domain }}{{ args.port_suffix }}
	http-request set-header         X-Forwarded-Port    {{ args.external_port }}

	{% endif %}
	{################################################################################################}

	{################################################################################################}
	{% if var_backend_data != '' %}

	### [backend - custom data] {{ args.name }} ###

	{################################################################################################}
	{% for line in var_backend_data.split('\n') %}

	{{ line | trim }}

	{% endfor %}
	{################################################################################################}

	{% endif %}
	{################################################################################################}

	{################################################################################################}
	{% if
		((args.endpoints | length) > 0)
		and
		(not (var_location_info.no_proxy | default(false) | bool))
	%}

	### [servers] {{ args.name }} ###

	{################################################################################################}
	{% for endpoint in args.endpoints %}

	{% set tmp_split = endpoint | urlsplit %}
	{% set tmp_port = ((tmp_split.port | default('', true)) != '') | ternary(
			tmp_split.port | default('', true),
			((tmp_split.scheme | default('', true)) == 'https') | ternary('443', '80')
		) | string
	%}
	{% set var_endpoint = (tmp_split.hostname | default('', true)) + ':' + tmp_port %}

	server server_{{ (loop.index | string) }} {{ var_endpoint }} resolvers dns_resolver {{ var_server_args }}

	{% endfor %}
	{################################################################################################}

	{% endif %}
	{################################################################################################}

{% endfor %}
{################################################################################################}

{% endfor %}
{################################################################################################}

{################################################################################################}
{% if args.use_basic_auth | bool %}

### [service] {{ args.name }} - basic auth ###

userlist auth_{{ args.name }}

	{% set var_basic_auth_data_content =
		args.basic_auth_data_content
		| default(var_global_conf.basic_auth_data_content | default(''), true)
	%}
	{% set var_basic_auth_data_content_value =
		var_global_contents[var_basic_auth_data_content] | default('')
	%}
	{% set var_basic_auth_data =
		args.basic_auth_data | default(var_basic_auth_data_content_value, true)
	%}

	{################################################################################################}
	{% for line in var_basic_auth_data.split('\n') %}

	{{ line | trim }}

	{% endfor %}
	{################################################################################################}

{% endif %}
{################################################################################################}

### [service] {{ args.name }} - end ###

{% endmacro %}
{################################################################################################}

global

{################################################################################################}
{% if (var_global_conf.global_data | default('')) != '' %}

	{################################################################################################}
	{% for line in var_global_conf.global_data.split('\n') %}

	{{ line | trim }}

	{% endfor %}
	{################################################################################################}

{% else %}

	log stdout  format raw  local0

	{################################################################################################}
	{% if var_global_conf.cli_stats | default(false) | bool %}

	stats socket /var/run/haproxy.sock mode 600 level admin
	stats timeout 60s

	{% endif %}
	{################################################################################################}

{% endif %}
{################################################################################################}

defaults

{################################################################################################}
{% if (var_global_conf.defaults_data | default('')) != '' %}

	{################################################################################################}
	{% for line in var_global_conf.defaults_data.split('\n') %}

	{{ line | trim }}

	{% endfor %}
	{################################################################################################}

{% else %}

	{# [Client IP] [X-User Header] [Duration] [Status] [Date & Time] [HTTP Request]    [Bytes Read] [Referer] [User Agent] [Total Time] #}
	{% set var_log_format =
		'>>> %ci '
		+ '%{+E}[capture.req.hdr(0)] '
		+ '%Ta '
		+ '%ST - '
		+ '[%T] '
		+ '%{+E}[capture.req.hdr(1)] '
		+ '%{+Q,+E}r '
		+ '%B '
		+ '"%{+E}[capture.req.hdr(2)]" '
		+ '"%{+E}[capture.req.hdr(3)]" '
		+ '%Tt'
	%}

	log global
	log-format '{{ var_log_format }}'
	timeout connect 5s
	timeout client 30s
	timeout server 30s

{% endif %}
{################################################################################################}

{################################################################################################}
{% macro include_frontend(args, port, content_type) %}

	{% set var_is_public_port = port in [var_global_public_http_port, var_global_public_https_port] %}
	{% set var_is_private_port = port in [var_global_private_http_port, var_global_private_https_port] %}
	{% set var_is_http_port = port in [var_global_public_http_port, var_global_private_http_port] %}
	{% set var_is_https_port = port in [var_global_public_https_port, var_global_private_https_port] %}
	{% set var_is_ssl = args.ssl | bool %}
	{% set var_is_ssl_private = var_is_ssl and (args.private | bool) %}
	{% set var_frontend_data = args.frontend_data | default('') %}
	{% set var_is_default_private = (args.private | bool) == var_is_private_port %}
	{% set var_is_default = var_is_default_private and (var_is_ssl == var_is_https_port) %}
	{% set var_final_url = args.protocol + '://' + args.domain + args.port_suffix %}

	{################################################################################################}
	{% if
		(var_is_default_private or (var_is_ssl_private and (port == var_global_public_http_port)))
		and
		(var_is_ssl or var_is_http_port)
	%}

	{################################################################################################}
	{% if content_type == 'rules' %}

	### [frontend - {{ args.name }}] start ###

	acl is_domain_{{ args.name }}           hdr(host) -i {{ args.domain }}
	acl is_domain_{{ args.name }}           hdr(host) -i {{ args.domain }}:{{ port }}

	{################################################################################################}
	{% if var_is_default and (args.use_basic_auth | bool) %}

	acl authusers_acl_{{ args.name }} http_auth(auth_{{ args.name }})
	http-request auth realm {{ args.name }} if is_domain_{{ args.name }} !authusers_acl_{{ args.name }}

	{% endif %}
	{################################################################################################}

	{################################################################################################}
	{% if args.domain == var_global_main_domain %}

	acl is_www_domain_{{ args.name }}       hdr(host) -i www.{{ args.domain }}
	acl is_www_domain_{{ args.name }}       hdr(host) -i www.{{ args.domain }}:{{ port }}

	{% endif %}
	{################################################################################################}

	{################################################################################################}
	{% if var_is_default and (var_frontend_data != '') %}

	### [frontend - {{ args.name }}] custom data ###

	{################################################################################################}
	{% for line in var_frontend_data.split('\n') %}

	{{ line | trim }}

	{% endfor %}
	{################################################################################################}

	{% endif %}
	{################################################################################################}

	### [frontend - {{ args.name }}] end ###

	{% elif content_type == 'redirects' %}

	{################################################################################################}
	{% if args.domain == var_global_main_domain %}

	redirect prefix {{ var_final_url }} code 301 if is_www_domain_{{ args.name }}

	{% endif %}
	{################################################################################################}

	{################################################################################################}
	{% if var_is_default_private and var_is_ssl and not var_is_https_port %}

	redirect prefix {{ var_final_url }} code 301 if is_domain_{{ args.name }} !is_ssl_cert_path !{ ssl_fc }

	{% endif %}
	{################################################################################################}

	{% elif content_type == 'backend' %}

	{################################################################################################}
	{% if var_is_default %}

	{################################################################################################}
	{% for location_info in args.location_info_list %}

	{% set var_location_info =
		(location_info is string)
		| ternary({ 'location': location_info }, location_info)
	%}

	{% set var_location_list = var_location_info.location | default([]) %}

	{% set var_location_list =
		(
			(var_location_list is iterable)
			and
			(var_location_list is not mapping)
			and
			(var_location_list is not string)
		)
		| ternary(var_location_list, [var_location_list])
	%}

	{################################################################################################}
	{% for location in var_location_list %}

	{% set var_default = (location == 'path_beg /') %}
	{% set var_suffix = var_default | ternary('', '_' + (loop.index | string)) %}
	{% set var_acl_path = var_default | ternary('', '{ ' + location + ' }') %}

	use_backend backend_{{ args.name }}{{ var_suffix }} if is_domain_{{ args.name }} {{ var_acl_path }}

	{% endfor %}
	{################################################################################################}

	{% endfor %}
	{################################################################################################}

	{% endif %}
	{################################################################################################}

	{% endif %}
	{################################################################################################}

	{% endif %}
	{################################################################################################}

{% endmacro %}
{################################################################################################}

{################################################################################################}
{% if not (var_global_conf.no_internal_stats | default(false) | bool) %}

### [frontend - internal] start ###

frontend frontend_internal
	mode http
	bind :9081
	stats enable if is_domain_private
	stats uri /stats if is_domain_private
	stats refresh 60s if is_domain_private

### [frontend - internal] start ###

{% endif %}
{################################################################################################}

{################################################################################################}
{% for port in var_global_ports | dict2items | map(attribute='value') | list %}

{% set var_is_https_port = port in [var_global_public_https_port, var_global_private_https_port] %}
{% set var_is_public_port = port in [var_global_public_http_port, var_global_public_https_port] %}
{% set var_internal_port = var_global_internal_port_dict[port] %}
{% set var_port_description = 'port ' +
	((var_internal_port == port) | ternary(port, port + ' (internal: ' + var_internal_port + ')'))
%}
{% set var_outer_proxy_ip_header = var_global_conf.outer_proxy_ip_header | default('CF-Connecting-IP', true) %}

{################################################################################################}
{% if var_global_ssl or not var_is_https_port %}

### [frontend - {{ var_port_description }}] start ###

frontend frontend_{{ port }}
	mode http

	{################################################################################################}
	{% if var_is_https_port %}

	bind :{{ var_internal_port }} ssl crt /etc/ssl/live/{{ var_global_main_domain }}/concat.pem

	{% else %}

	bind :{{ var_internal_port }}

	{% endif %}
	{################################################################################################}

	{################################################################################################}
	{% if not (var_global_conf.capture_no_headers | default(false) | bool) %}

	### [frontend] capture headers ###
	capture request header X-User len 255
	capture request header Host len 255
	capture request header Referer len 255
	capture request header User-Agent len 511

	{% endif %}
	{################################################################################################}

	{################################################################################################}
	{% if args.use_outer_proxy | bool %}

	### [frontend] external proxy ###

	acl  is_outer_proxy  src -f {{ var_outer_proxy_ips_path }}
	http-request set-src req.hdr({{ var_outer_proxy_ip_header }}) if is_outer_proxy
	http-request deny deny_status 403 if !is_outer_proxy

	{% endif %}
	{################################################################################################}

	{################################################################################################}
	{% if var_is_public_port and not (var_global_conf.disable_blacklist | default(false) | bool) %}

	### [frontend] blacklists ###

	acl  is_blacklisted_manual  src,map_ip({{ var_blacklist_ip_manual_path }}) -m found
	http-request deny deny_status 403 if is_blacklisted_manual

	acl  is_blacklisted_auto  src,map_ip({{ var_blacklist_ip_auto_path }}) -m found
	http-request deny deny_status 403 if is_blacklisted_auto

	acl  is_blacklisted_ua  req.fhdr(User-Agent) -f {{ var_blacklist_user_agent_path }}
	http-request deny deny_status 403 if is_blacklisted_ua

	{% endif %}
	{################################################################################################}

	{################################################################################################}
	{% if not (var_global_conf.no_rate_limits | default(false) | bool) %}

	### [frontend] rate limits ###

	stick-table  type ip  size 10m  expire 30s  store http_req_rate(10s)
	http-request track-sc0 src
	http-request deny deny_status 429 if { sc_http_req_rate(0) gt 20 }

	{% endif %}
	{################################################################################################}

	{################################################################################################}
	{% if var_global_ssl %}

	acl is_ssl_cert_path    path -i -m beg /.well-known

	{% endif %}
	{################################################################################################}

	{################################################################################################}
	{% for service in var_global_services | default([]) %}

	{################################################################################################}
	{% if service.when | default(true) | bool %}

	{{ include_service(service, 'frontend', { 'port': port, 'content_type': 'rules' }) }}

	{% endif %}
	{################################################################################################}

	{% endfor %}
	{################################################################################################}

	{################################################################################################}
	{% if (var_global_conf.frontend_data | default('')) != '' %}

	### [frontend] - custom data ###

	{################################################################################################}
	{% for line in var_global_conf.frontend_data.split('\n') %}

	{{ line | trim }}

	{% endfor %}
	{################################################################################################}

	{% endif %}
	{################################################################################################}

	### [frontend] redirects ###

	{################################################################################################}
	{% for service in var_global_services | default([]) %}

	{################################################################################################}
	{% if service.when | default(true) | bool %}

	{{ include_service(service, 'frontend', { 'port': port, 'content_type': 'redirects' }) }}

	{% endif %}
	{################################################################################################}

	{% endfor %}
	{################################################################################################}

	### [frontend] use backends ###

	{################################################################################################}
	{% if var_global_ssl %}

	use_backend webservice if is_ssl_cert_path

	{% endif %}
	{################################################################################################}

	{################################################################################################}
	{% for service in var_global_services | default([]) %}

	{################################################################################################}
	{% if service.when | default(true) | bool %}

	{{ include_service(service, 'frontend', { 'port': port, 'content_type': 'backend' }) }}

	{% endif %}
	{################################################################################################}

	{% endfor %}
	{################################################################################################}

### [frontend - {{ var_port_description }}] end ###

{% endif %}
{################################################################################################}

{% endfor %}
{################################################################################################}

{################################################################################################}
{% for service in var_global_services | default([]) %}

{################################################################################################}
{% if service.when | default(true) | bool %}

	{{ include_service(service, 'backend', {}) }}

{% endif %}
{################################################################################################}

{% endfor %}
{################################################################################################}

# backend for static webserver
backend webservice
	mode http
	server webservice {{ var_global_webservice_endpoint }}

# dns resolver
resolvers dns_resolver
	nameserver dns1 {{ var_global_conf.resolver | default('127.0.0.11:53', true) }}

	{################################################################################################}
	{% for line in (var_global_conf.resolver_data | default('')).split('\n') %}

	{{ line | trim }}

	{% endfor %}
	{################################################################################################}
