root: "haproxy_schema"
schemas:
  haproxy_schema:
    type: "dict"
    props:
      main_domain:
        type: "str"
        non_empty: true
        description: >-
          the main domain for the webservice; used when defining the path to ssl files,
          as well as for redirecting from www.main-domain to main-domain
      ports:
        schema: "ports"
        non_empty: true
        description: "nginx public and private, secure and non-secure, external ports"
      conf:
        schema: "conf"
        description: "general nginx configuration and values to replace defaults in the template"
      domains:
        type: "map"
        elem_type: "str"
        description: "dictionary with service names mapped to domains"
      contents:
        type: "map"
        elem_type: "str"
        description: "dictionary with the pod contents"
      dependencies:
        type: "map"
        elem_schema: "node_dependency"
        description: "dictionary with service names mapped to domains"
      services:
        type: "list"
        elem_schema: "service"
        required: true
        description: "list with services that will translate in server sections in the file"
  ports:
    type: "dict"
    props:
      public_http_port:
        type: "str"
        non_empty: true
        description: "public non-secure port"
      public_https_port:
        type: "str"
        non_empty: true
        description: "public secure port"
      private_http_port:
        type: "str"
        non_empty: true
        description: "private non-secure port"
      private_https_port:
        type: "str"
        non_empty: true
        description: "private secure port"
  conf:
    type: "dict"
    props:
      webservice_endpoint:
        type: "str"
        description: "endpoint to the service which returns static files"
      ssl:
        type: "bool"
        description: >-
          when true, listen on secure ports: 443 (remote) / 8443 (local) and 9443 (private);
          used as default for the services ssl
      disable_basic_auth:
        type: "bool"
        description: "disables basic authentication for the services"
      basic_auth_data_content:
        type: "str"
        description: "default content for basic authentication (when not defined in the service)"
      disable_blacklist:
        type: "str"
        description: "disables ip and user agent blacklist"
      no_rate_limits:
        type: "bool"
        description: "the default rate limit statements for the front-ends are not included"
      outer_proxy_ips_path:
        type: "str"
        description: >-
          path to the file with ips to be allowed from an external proxy for services that expect
          requests from it (block requests from other ips); defaults to 'haproxy/auto/ips-proxy.lst'
          in the 'sync' data directory ('/var/main/data/sync/haproxy/auto/ips-proxy.lst')
      outer_proxy_ip_header:
        type: "str"
        description: >-
          specifies the header that has the client ip when receiving request from an external proxy;
          defaults to 'CF-Connecting-IP'
      cli_stats:
        type: "bool"
        description: "the default stats statements in the global section (for cli access) are included"
      no_internal_stats:
        type: "bool"
        description: "the internal frontend section with the stats url are not included"
      resolver:
        type: "str"
        description: "defaults to 127.0.0.11"
      global_data:
        type: "str"
        description: "data to include in the global section"
      defaults_data:
        type: "str"
        description: "data to include in the defaults section"
      resolver_data:
        type: "str"
        description: "data to include in the resolvers section"
      frontend_data:
        type: "str"
        description: "data to include in the frontend sections"
      blacklist_ip_manual_path:
        type: "str"
        description: >-
          path to the file that have the ips (or cidrs) that, when matched
          with the client ip, will deny the request with a 403 error code;
          defaults to '/var/main/data/sync/haproxy/manual/ips-blacklist.conf'
      blacklist_ip_auto_path:
        type: "str"
        description: >-
          path to the file that have the ips (or cidrs) that, when matched
          with the client ip, will deny the request with a 403 error code;
          defaults to '/var/main/data/sync/haproxy/auto/ips-blacklist-auto.conf'
      blacklist_user_agent_path:
        type: "str"
        description: >-
          path to the file that have the (exact) user agents) that, when matched
          with the client user agent, will deny the request with a 403 error code;
          defaults to '/var/main/data/sync/haproxy/manual/ua-blacklist.lst'
  node_dependency:
    type: "dict"
    lax: true
    props:
      host:
        type: "str"
      host_list:
        type: "list"
        elem_type: "str"
  service:
    type: "dict"
    props:
      when:
        type: "bool"
        description: "when false, the service is ignored; defaults to true"
      name:
        type: "str"
        non_empty: true
        description: "service name (has only a labeling function when the domain is defined)"
      domain:
        type: "str"
        description: >-
          domain in which the requests are received;
          when not defined or empty, retrieves from the domains dictionary
          (using the service 'domain_name' or 'name')
      domain_name:
        type: "str"
        description: >-
          when the domain property is undefined or empty, this property (or the 'name'property, if this
          property is not defined) is used to retrieve the domain from the domains dictionary; if
          no domain is present with the given name, an error is thrown
      endpoint:
        type: "simple_list"
        elem_type: "str"
        description: >-
          the service endpoint (or endpoints), used when the request should be proxied to a service in
          the given endpoint, required when the 'proxy' property is true; included when the 'proxy'
          property in the location is true, or when the 'data' property is empty
      dependency_name:
        type: "str"
        description: >-
          when defining the service endpoint to proxy requests, the 'endpoint' property is used
          to define the endpoint; when the 'endpoint' property is not defined, this 'dependency_name'
          property (or the 'name'property, if this property is not defined) is used to retrieve the
          endpoint from the node dependency with the same name; if both properties are not defined
          (or empty), requests are not proxied (if proxy is true, an error is thrown)
      proxy:
        type: "bool"
        description: "when true, throws an error if the service endpoint isn't (or can't be) defined"
      frontend_data:
        type: "str"
        description: "includes the data defined in this property in the frontend section for the service"
      backend_data:
        type: "str"
        description: .-
          includes the data defined in this property in the backend section (for all paths),
          when the location does not have a (more specific) custom 'data' property
      upstream_args:
        type: "str"
        description: "arguments to be used for the upstream servers"
      ssl:
        type: "bool"
        description: "when true, expects a secure connection (https); defaults to conf.ssl"
      upgrade:
        type: "bool"
        description: "when true, expects a secure connection (https); defaults to false"
      private:
        type: "bool"
        description: "when true, uses the private ports; defaults to false"
      use_basic_auth:
        type: "bool"
        description: >-
          when true, requires a basic authentication on requests; defaults to private;
          it's disabled when conf.disable_basic_auth is true
      basic_auth_data:
        type: "str"
        description: >-
          basic authentication data for the service (required when basic authentication
          is enabled for the service)
      basic_auth_data_content:
        type: "str"
        description: >-
          same as basic_auth_data, but instead is a name of a pod content (that will be the basic auth content)
      use_outer_proxy:
        type: "bool"
        description: "when true, expects to receive requests from an external proxy (ex: cloudflare)"
      locations:
        type: "simple_list"
        elem_schema: "location_info"
        description: |
          locations for the service, can be:

          - a string with the location (equivalent to a list with only this string)
          - a list of strings (each string is equivalent to a dictionary with 'location' being the list)
          - a dictionary (equivalent to a list with only this dictionary)
          - a list of dictionaries (most complete representation, for more complex cases, with several locations and options)

          defaults to '/', which is equivalent to:
          - ['/']
          - { 'location': '/' }
          - { 'location': ['/'] }
          - [{ 'location': '/' }])
          - [{ 'location': ['/'] }])
  location_info:
    type: "simple_dict"
    alternative_type: "str"
    description: "schema for the data about locations"
    props:
      location:
        type: "simple_list"
        elem_type: "str"
        description: "path(s) for the backend"
      data:
        type: "str"
        description: "data to be included in the location (backend for a the path specified)"
      server_args:
        type: "str"
        description: "data (args) to be included for each server in the backend"
      no_proxy:
        type: "bool"
        description: "proxies the request, even if data is defined"
